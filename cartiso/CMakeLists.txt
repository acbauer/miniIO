cmake_minimum_required(VERSION 3.3)
project(Cartiso C)

find_package(MPI REQUIRED)
include_directories(SYSTEM ${MPI_C_INCLUDE_PATH})

set(SOURCES iso.c sfc.c cartiso.c ${CMAKE_CURRENT_SOURCE_DIR}/../osn/open-simplex-noise.c)
set(LIBS)
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/.. ${CMAKE_CURRENT_SOURCE_DIR}/../osn)

set(ENABLE_PVTI ON CACHE BOOL "ENABLE PVTI")
if(ENABLE_PVTI)
  list(APPEND SOURCES pvti.c)
  add_definitions(-DHAS_PVTI)
endif()

set(ENABLE_PVTP ON CACHE BOOL "ENABLE PVTP")
if(ENABLE_PVTP)
  list(APPEND SOURCES pvtp.c)
  add_definitions(-DHAS_PVTP)
endif()

set(ENABLE_ADIOS ON CACHE BOOL "ENABLE ADIOS")
if(ENABLE_ADIOS)
  find_package(ADIOS REQUIRED)
  include_directories(SYSTEM ${ADIOS_INCLUDE_DIRS})
  find_package(ADIOS)
  list(APPEND SOURCES adiosfull.c adiosiso.c)
  list(APPEND LIBS ${ADIOS_LIBRARIES})
  add_definitions(-DHAS_ADIOS)
endif()

set(ENABLE_HDF5 ON CACHE BOOL "ENABLE HDF5")
if(ENABLE_HDF5)
  find_package(HDF5 REQUIRED)
  include_directories(SYSTEM ${HDF5_INCLUDE_DIRS})
  list(APPEND SOURCES hdf5i.c hdf5p.c)
  list(APPEND LIBS ${HDF5_LIBRARIES})
  add_definitions(-DHAS_HDF5)
endif()

set(ENABLE_CATALYST OFF CACHE BOOL "Enable Catalyst")
if(ENABLE_CATALYST)
  # we only need C++ compilers if we're building the Adaptor
  enable_language(CXX)
  find_package(ParaView 4.1 REQUIRED COMPONENTS vtkPVPythonCatalyst)
  include("${PARAVIEW_USE_FILE}")
  list(APPEND SOURCES catalyst.cxx)
  #target_link_libraries(CFullExampleAdaptor vtkPVPythonCatalyst)
  add_definitions("-DHAS_CATALYST")
  if(NOT PARAVIEW_USE_MPI)
    message(SEND_ERROR "ParaView must be built with MPI enabled")
  endif()
endif()

set(ENABLE_SENSEI OFF CACHE BOOL "Enable SENSEI")
if(ENABLE_SENSEI)
  # we only need C++ compilers if we're building the Adaptor
  enable_language(CXX)
  find_package(SENSEI REQUIRED sensei)
  include_directories(${SENSEI_INCLUDE_DIRS})
  if (NOT ENABLE_PARAVIEW)
    # we need to also bring in VTK if it's not already available
    find_package(ParaView REQUIRED vtkPVPythonCatalyst HINTS ${VTK_DIR}/.. )
    include("${PARAVIEW_USE_FILE}")
  endif()
  list(APPEND SOURCES sensei.cxx)
  add_definitions("-DHAS_SENSEI")
endif()

if(NOT ENABLE_CATALYST AND NOT ENABLE_SENSEI)
  # we need to manually link against MPI, otherwise we just use the SENSEI or Catalyst one
  find_package(MPI REQUIRED)
  include_directories(${MPI_C_INCLUDE_PATH})
endif()

add_executable(cartiso ${SOURCES})
if(ENABLE_CATALYST)
  target_link_libraries(cartiso LINK_PRIVATE vtkPVPythonCatalyst)
  # not sure if the following MPI stuff is necessary
  #include(vtkMPI)
  #vtk_mpi_link(cartiso)
endif()
if(ENABLE_SENSEI)
  find_package (Threads)
  #target_link_libraries(cartiso LINK_PRIVATE ${SENSEI_LIBS} ${CMAKE_THREAD_LIBS_INIT} vtkCommonDataModel vtkCommonCore vtkFiltersCore)
  list(APPEND LIBS ${SENSEI_LIBS} ${CMAKE_THREAD_LIBS_INIT} vtkPVPythonCatalyst ${VTK_LIBRARIES})
  include(vtkModuleMacros)
  include(vtkMPI)
  vtk_mpi_link(cartiso)
endif()

target_link_libraries(cartiso LINK_PRIVATE ${LIBS} ${MPI_LIBRARIES} ${MPI_CXX_LIBRARIES} /usr/lib/openmpi/lib/libmpi_cxx.so m)

option(BUILD_TESTING "Build Testing" OFF)
# Setup testing.
if (BUILD_TESTING)
  include(CTest)
  #add_test(NAME CFullExampleTest COMMAND CFullExample ${CMAKE_CURRENT_SOURCE_DIR}/SampleScripts/feslicescript.py)
  #set_tests_properties(CFullExampleTest PROPERTIES LABELS "PARAVIEW;CATALYST")
endif()
